user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'cert_subject="$ssl_client_s_dn" cert_verify="$ssl_client_verify"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;
    
    # Server block 1: Standard TLS (no client cert required)
    server {
        listen 8443 ssl http2;
        server_name localhost;

        # Server certificate
        ssl_certificate /server-certs/bundle-3.pem;
        ssl_certificate_key /server-certs/key.pem;

        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Optional: Request client certificate but don't require it
        # This allows the same server to serve both authenticated and non-authenticated users
        ssl_client_certificate /ca-bundle.pem;
        ssl_verify_client optional;
        ssl_verify_depth 2;

        root /usr/share/nginx/html;
        index index.html;

        location / {
            try_files $uri $uri/ =404;
        }

        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # Add security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
    }

    # Server block 2: mTLS Required (strict client certificate enforcement)
    server {
        listen 8444 ssl http2;
        server_name localhost;

        # Server certificate
        ssl_certificate /server-certs/bundle-3.pem;
        ssl_certificate_key /server-certs/key.pem;

        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Client certificate REQUIRED
        ssl_client_certificate /ca-bundle.pem;
        ssl_verify_client on;
        ssl_verify_depth 2;

        root /usr/share/nginx/html;

        # Default location - serve mTLS success page with SSI enabled
        location / {
            ssi on;
            ssi_types text/html;
            default_type text/html;
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Nginx mTLS Success</title>
    <style>body{font-family:Arial,sans-serif;margin:40px;background:#f0f0f0}.container{background:white;padding:30px;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1)}h1{color:#009639}.info{background:#e8f4f8;padding:15px;border-radius:4px;margin:20px 0}.label{font-weight:bold;color:#333}.value{color:#555;margin-left:10px}</style>
</head>
<body>
    <div class="container">
        <h1>✓ Client Certificate Authentication Success!</h1>
        <p>You have successfully authenticated using your client certificate.</p>
        <div class="info">
            <p><span class="label">Subject DN:</span><span class="value"><!--# echo var="ssl_client_s_dn" default="N/A" --></span></p>
            <p><span class="label">Issuer DN:</span><span class="value"><!--# echo var="ssl_client_i_dn" default="N/A" --></span></p>
            <p><span class="label">Serial:</span><span class="value"><!--# echo var="ssl_client_serial" default="N/A" --></span></p>
            <p><span class="label">Valid From:</span><span class="value"><!--# echo var="ssl_client_v_start" default="N/A" --></span></p>
            <p><span class="label">Valid Until:</span><span class="value"><!--# echo var="ssl_client_v_end" default="N/A" --></span></p>
            <p><span class="label">Verify:</span><span class="value"><!--# echo var="ssl_client_verify" default="N/A" --></span></p>
        </div>
        <p><a href="https://localhost:8443/">← Back to standard TLS endpoint</a></p>
    </div>
</body>
</html>';
        }

        location /health {
            access_log off;
            return 200 "OK - mTLS Active\n";
            add_header Content-Type text/plain;
        }

        # Add security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
}

